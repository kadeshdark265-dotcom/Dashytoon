// --- بيانات حلقات تجريبية (بدّلها لاحقًا بصورك وأوصافك) ---
const EPISODES = [
  {
    id: "ep-001",
    title: "البداية الداشية",
    desc: "لقطة افتتاحية لعالم Dashytoon.",
    tags: ["كوميديا","افتتاح"],
    thumb: "images/ep1-thumb.jpg", // ارفع الصورة بهذا الاسم داخل مجلد images
    image: "images/ep1.jpg",
    likes: 12,
    date: "2025-08-15"
  },
  {
    id: "ep-002",
    title: "مطاردة في السوق",
    desc: "إطار سريع وألوان حيوية ومفاجأة بالنهاية.",
    tags: ["أكشن","مدينة"],
    thumb: "images/ep2-thumb.jpg",
    image: "images/ep2.jpg",
    likes: 35,
    date: "2025-08-18"
  },
  {
    id: "ep-003",
    title: "نكتة من خارج الكادر",
    desc: "سيناريو قصير بمفارقة لطيفة.",
    tags: ["كوميديا"],
    thumb: "images/ep3-thumb.jpg",
    image: "images/ep3.jpg",
    likes: 22,
    date: "2025-08-20"
  }
];

// --- عناصر DOM ---
const cardsEl = document.getElementById("cards");
const searchInput = document.getElementById("searchInput");
const sortSelect = document.getElementById("sortSelect");
const themeToggle = document.getElementById("themeToggle");
const viewer = document.getElementById("viewer");
const viewerImg = document.getElementById("viewerImg");
const viewerTitle = document.getElementById("viewerTitle");
const viewerDesc = document.getElementById("viewerDesc");
const prevBtn = document.getElementById("prevBtn");
const nextBtn = document.getElementById("nextBtn");
document.getElementById("year").textContent = new Date().getFullYear();

let state = {
  query: "",
  sort: "new",
  items: EPISODES.slice(),
  currentIndex: 0
};

// --- ثيم (فاتح/داكن) مع حفظ الاختيار ---
const savedTheme = localStorage.getItem("theme") || "dark";
if (savedTheme === "light") document.body.setAttribute("data-theme","light");
themeToggle.addEventListener("click", () => {
  const isLight = document.body.getAttribute("data-theme") === "light";
  document.body.toggleAttribute("data-theme");
  if (isLight) document.body.removeAttribute("data-theme");
  localStorage.setItem("theme", isLight ? "dark" : "light");
});

// --- إعجاب/مفضلة محليًا بـ localStorage ---
function getLikesMap(){
  try { return JSON.parse(localStorage.getItem("likes")|| "{}"); }
  catch { return {}; }
}
function setLikesMap(map){ localStorage.setItem("likes", JSON.stringify(map)); }
function getLikeCount(id, base){
  const map = getLikesMap();
  return typeof map[id] === "number" ? map[id] : base;
}
function bumpLike(id, base){
  const map = getLikesMap();
  const current = getLikeCount(id, base);
  map[id] = current + 1;
  setLikesMap(map);
}

// --- رسم الكروت ---
function render(){
  const q = state.query.trim().toLowerCase();
  let data = EPISODES.slice();

  if (q){
    data = data.filter(ep =>
      ep.title.toLowerCase().includes(q) ||
      ep.tags.join(" ").toLowerCase().includes(q)
    );
  }

  if (state.sort === "new"){
    data.sort((a,b)=> new Date(b.date) - new Date(a.date));
  } else if (state.sort === "popular"){
    data.sort((a,b)=> getLikeCount(b.id,b.likes) - getLikeCount(a.id,a.likes));
  } else {
    data.sort((a,b)=> a.title.localeCompare(b.title,'ar'));
  }

  state.items = data;
  cardsEl.innerHTML = data.map(ep => {
    const like = getLikeCount(ep.id, ep.likes);
    return `
      <article class="card" data-id="${ep.id}">
        <img class="thumb" src="${ep.thumb}" alt="${ep.title}" loading="lazy"
             onerror="this.style.background='linear-gradient(135deg,#222,#444)'; this.src='';">
        <div class="content">
          <h3>${ep.title}</h3>
          <div class="meta">
            <div class="tags">${ep.tags.map(t=>`<span class="tag">#${t}</span>`).join("")}</div>
            <span title="الإعجابات">❤️ ${like}</span>
          </div>
          <div class="row">
            <button class="like" data-like>أعجبني</button>
            <button class="btn open" data-open>عرض</button>
          </div>
        </div>
      </article>
    `;
  }).join("");
}

// --- تفاعلات البحث والترتيب ---
searchInput.addEventListener("input", e => { state.query = e.target.value; render(); });
sortSelect.addEventListener("change", e => { state.sort = e.target.value; render(); });

// --- فتح العارض وغلقه والتنقل ---
cardsEl.addEventListener("click", (e) => {
  const card = e.target.closest(".card");
  if (!card) return;
  const id = card.getAttribute("data-id");
  const index = state.items.findIndex(x=>x.id===id);
  if (e.target.matches("[data-open]")) openViewer(index);
  if (e.target.matches("[data-like]")) {
    const ep = state.items[index];
    bumpLike(ep.id, ep.likes);
    render();
  }
});

function openViewer(i){
  state.currentIndex = i;
  const ep = state.items[i];
  viewerImg.src = ep.image;
  viewerImg.alt = ep.title;
  viewerTitle.textContent = ep.title;
  viewerDesc.textContent = ep.desc;
  viewer.hidden = false;
}
function closeViewer(){ viewer.hidden = true; }
function next(){ if (state.currentIndex < state.items.length -1) openViewer(state.currentIndex+1); }
function prev(){ if (state.currentIndex > 0) openViewer(state.currentIndex-1); }

viewer.addEventListener("click", (e)=> { if (e.target.hasAttribute("data-close")) closeViewer(); });
document.addEventListener("keydown", (e)=> {
  if (viewer.hidden) return;
  if (e.key === "Escape") closeViewer();
  if (e.key === "ArrowRight") next();
  if (e.key === "ArrowLeft") prev();
});
nextBtn.addEventListener("click", next);
prevBtn.addEventListener("click", prev);

// --- فورم الإشتراك (بدون خادم) — استبدله بخدمة مثل Formspree لاحقًا ---
document.getElementById("subForm").addEventListener("submit", (e)=>{
  e.preventDefault();
  const email = document.getElementById("emailInput").value.trim();
  if (!email) return;
  alert("تم تسجيل بريدك: " + email + " — استبدل هذا التنبيه بدمج خدمة بريد لاحقًا.");
  e.target.reset();
});

// بدء
render();
